package project.client.persistence;

// Generated May 19, 2009 2:03:27 AM by Hibernate Tools 3.2.2.GA

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;


/**
 * MessageBoard generated by hbm2java
 */
public class MessageBoard implements java.io.Serializable {

	private Integer id;
	private String name;
	private String description;
	private String url;
	private Set<User> users = new HashSet<User>(0);
	private List<MessageThread> messageThreads = new LinkedList<MessageThread>();

	public MessageBoard() {
	}

	public MessageBoard(String name) {
		this.name = name;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

	public List<MessageThread> getMessageThreads() {
		return this.messageThreads;
	}

	public void setMessageThreads(List<MessageThread> messageThreads) {
		this.messageThreads = messageThreads;
	}

	/*
	public void populate (MessageBoardCrawler crawler) {
		while (crawler.hasNext()) {
			crawler.next();
			this.populate(crawler, crawler.getPage());
		}
	}

	public void populate (MessageBoardCrawler crawler, int page) {
		this.populate(crawler, page, true);
	}

	public void populate (MessageBoardCrawler crawler, int page, boolean append) {

		if (!append) {
			this.users.clear();
			this.messageThreads.clear();
		}

		try {

			crawler.initCrawler(new Object[] {
					this,
					new Integer (page)
			});
			
			
			List<MessageThread> list = crawler.extractMessageThreads();
			Iterator<MessageThread> i = list.iterator();
			
			while (i.hasNext()) {
			
				MessageThread th = i.next();
				this.getMessageThreads().add(th);
				
			}

		} catch (MalformedURLException e) {
			e.printStackTrace();
		}

	}
	*/
}
